<launch>

  <arg name="show_rviz" default="false" />
  <arg name="pipeline" default="ompl" />
  <arg name="ns_prefix" default="/left_arm" />

  <param name="/use_sim_time" value="true"/>
  <group ns="left_arm">
    <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
    <include file="$(find left_arm_moveit_config)/launch/planning_context.launch">
      <arg name="load_robot_description" value="true"/>
    </include>

    <!-- Load joint controller configurations from YAML file to parameter server -->
    <rosparam file="$(find left_arm_moveit_config)/config/ros_controllers.yaml" command="load"/>

    <!-- Load the controllers -->
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
          output="screen" args="left_arm_controller joint_state_controller"/>


    <!-- Given the published joint states, publish tf for the robot links -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
          respawn="true" output="screen">
    </node>

    <node pkg="roport" type="roport_robot_interface" name="roport_robot_interface" output="screen">
      <param name="joint_name_param_id" value="$( arg ns_prefix)/move_group/hardware_interface/joints"/>
      <rosparam param="measure_joint_states_id">
        [
        "/left_arm/measured_joint_states",
        ]
      </rosparam>
      <rosparam param="control_joint_states_id">
        [
        "cartesian/solution",
        ]
      </rosparam>
      <rosparam param="joint_states_group">
        <!-- Leave this as empty means control all joints -->
        []
      </rosparam>
      <rosparam param="joint_init_names">
        <!-- Names of the joints which need the initial positions not be 0 -->
        [
        "arm_L_joint1", "arm_L_joint2", "arm_L_joint3", "arm_L_joint4", "arm_L_joint5", "arm_L_joint6",
        ]
      </rosparam>
      <rosparam param="joint_init_positions">
        <!-- Positions of the joints which need the initial positions not be 0, better using double type -->
        [
        0., 0.3489, -0.3489, 0., -1.5708, 0.
        ]
      </rosparam>
    </node>

    <!-- Run MoveIt! -->
    <include file="$(find left_arm_moveit_config)/launch/move_group.launch">
      <arg name="info" value="true"/>
      <arg name="pipeline" value="$(arg pipeline)"/>
    </include>

    <group if="$(arg show_rviz)">
      <!-- Run Rviz and load the default config to see the state of the move_group node -->
      <include file="$(find left_arm_moveit_config)/launch/moveit_rviz.launch">
        <arg name="rviz_config" value="$(find left_arm_moveit_config)/launch/moveit.rviz"/>
      </include>
    </group>

<!--    <node pkg="roport" type="roport_moveit_server.py" name="roport_moveit_server" output="screen">-->
<!--      <rosparam param="group_names">['left_arm']</rosparam>-->
<!--      <rosparam param="ee_links">['hand_L_ee_link']</rosparam>-->
<!--      <rosparam param="ref_frames">['arm_L_link0']</rosparam>-->
<!--    </node>-->

  </group>
</launch>
